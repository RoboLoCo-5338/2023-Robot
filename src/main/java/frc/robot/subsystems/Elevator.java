package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;


/**
 *
 */
public class Elevator extends PIDSubsystem {
    public static final int height1 = 1;
    public static final int height2 = 2;
    public static final int height3 = 3;

    private Encoder quadratureEncoder1;
    private PWMVictorSPX motorController2;

    // P I D Variables
    private static final double kP = 1.0;
    private static final double kI = 0.0;
    private static final double kD = 0.0;
    private static final double kF = 0.0;

    // Initialize your subsystem here
    public Elevator() {
        super(new PIDController(kP, kI, kD));
        getController().setTolerance(0.2);

        quadratureEncoder1 = new Encoder(1, 2, false, EncodingType.k4X);
        addChild("Quadrature Encoder 1", quadratureEncoder1);
        quadratureEncoder1.setDistancePerPulse(1.0);

        motorController2 = new PWMVictorSPX(2);
        addChild("Motor Controller 2", motorController2);
        motorController2.setInverted(false);
    }

    // Use these to get going:
    // setSetpoint() - Sets where the PID controller should move the system
    // to
    // enable() - Enables the PID controller.

    // This is the PID getter
    public double getPIDCommand_Input() {
        return 0.0; // Insert your feedback device here
    }

    // This is the PID setter
    public void setPIDCommand_Output(double currentValue) {
        motorController2.set(currentValue);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        super.periodic();

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    @Override
    public double getMeasurement() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return quadratureEncoder1.getRate();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    public void useOutput(double output, double setpoint) {
        output += setpoint * kF;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        motorController2.set(output);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public Encoder getQuadratureEncoder1() {
        return quadratureEncoder1;

    }

    public MotorController getMotorController2() {
        return motorController2;

    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

}
